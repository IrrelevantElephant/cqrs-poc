services:
  ui:
    build:
      context: ..
      dockerfile: ./ui/Dockerfile
    networks:
      - default
    ports:
      - "8000:80"
    develop:
      watch:
        - path: ../ui/
          action: rebuild
          ignore:
            - "../ui/node_modules"

  bff:
    build:
      context: ..
      dockerfile: ./Bff/Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - WriteApiAddress=http://writeapi:8080
      - ReadApiAddress=http://readapi:8080
    networks:
      - default
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      migrator:
        condition: service_completed_successfully
    develop:
      watch:
        - path: ../Bff/
          action: rebuild

  writeapi:
    build:
      context: ..
      dockerfile: ./WriteApi/Dockerfile
    environment:
      - MassTransitConfig__Username=guest
      - MassTransitConfig__Password=guest
      - MassTransitConfig__Uri=rabbit
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - ConnectionString=Host=database;Port=5432;Username=postgres;Password=password;Database=todos
    networks:
      - default
    ports:
      - "8082:8080"
      - "8083:8081"
    depends_on:
      migrator:
        condition: service_completed_successfully
      rabbit:
        condition: service_healthy
    develop:
      watch:
        - path: ../WriteApi/
          action: rebuild
          
  handlers:
    build:
      context: ..
      dockerfile: ./Handlers/Dockerfile
    environment:
      - MassTransitConfig__Username=guest
      - MassTransitConfig__Password=guest
      - MassTransitConfig__Uri=rabbit
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - ConnectionString=Host=database;Port=5432;Username=postgres;Password=password;Database=todos
    networks:
      - default
    depends_on:
      migrator:
        condition: service_completed_successfully
      rabbit:
        condition: service_healthy
    develop:
      watch:
        - path: ../Handlers/
          action: rebuild

  cacheupdater:
    build:
      context: ..
      dockerfile: ./CacheUpdater/Dockerfile
    environment:
      - MassTransitConfig__Username=guest
      - MassTransitConfig__Password=guest
      - MassTransitConfig__Uri=rabbit
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - ConnectionString=Host=database;Port=5432;Username=postgres;Password=password;Database=todos
      - CacheConnectionString=cache
    networks:
      - default
    depends_on:
      migrator:
        condition: service_completed_successfully
      rabbit:
        condition: service_healthy
      cache:
        condition: service_healthy
    develop:
      watch:
        - path: ../CacheUpdater/
          action: rebuild

  readapi:
    build:
      context: ..
      dockerfile: ./ReadApi/Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - CacheConnectionString=cache
      - MassTransitConfig__Username=guest
      - MassTransitConfig__Password=guest
      - MassTransitConfig__Uri=rabbit
    networks:
      - default
    ports:
      - "8084:8080"
      - "8085:8081"
    depends_on:
      cache:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    develop:
      watch:
        - path: ../ReadApi/
          action: rebuild
          
  websockethub:
    build:
      context: ..
      dockerfile: ./WebSocketHub/Dockerfile
    environment:
      - MassTransitConfig__Username=guest
      - MassTransitConfig__Password=guest
      - MassTransitConfig__Uri=rabbit
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
    networks:
      - default
    ports:
      - "8086:8080"
      - "8087:8081"
    depends_on:
      rabbit:
        condition: service_healthy
    develop:
      watch:
        - path: ../WebSocketHub/
          action: rebuild
      
  migrator:
    build:
      context: ..
      dockerfile: ./Migrator/Dockerfile
    environment:
      - ConnectionString=Host=database;Port=5432;Username=postgres;Password=password;Database=todos
    networks:
      - default
    depends_on:
      database:
        condition: service_healthy
    develop:
      watch:
        - path: ../Migrator/
          action: rebuild
        
  database:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=todos
    healthcheck:
       test: ["CMD", "pg_isready", "-q", "-d", "todos", "-U", "postgres"]
       interval: 1s
       timeout: 60s
       retries: 60
       start_period: 80s

  cache:
    image: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 30s

  rabbit:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      retries: 5

  otelcol:
    image: otel/opentelemetry-collector-contrib:0.117.0
    # command: [ "--config=/etc/otelcol-config.yml" ]
    # volumes:
    #   - ./otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector/otelcol-config.yml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "9000:9000"
      - "8888:8888"

  tempo:
    image: grafana/tempo:latest
    ports:
      - "3200:3200"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    command: [ "-config.file=/etc/tempo.yaml" ]

  loki:
    image: grafana/loki:3.3.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus
    volumes:
     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
     - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana/:/etc/grafana/provisioning
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 10s
      retries: 30
    depends_on:
      tempo:
        condition: service_started
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      otelcol:
        condition: service_started
